@page "/productcrud/{productid:int?}"
<!--
    on the page directive above, a routing parameter has been add
    this will allow an integer value to be passed to this page
    the routing parameter (productid) needs to be declare in your code area below

    if you have the situation where your receive page may or maynot receive a parameter
        value THEN make the datatype nullable (?)
-->
<PageTitle>Product CRUD</PageTitle>
@rendermode InteractiveServer
@using WestWindSystem.BLL;
@using WestWindSystem.Entities;

<h3>Product  CRUD</h3>
<h4>... sample of maintaining a database record using CRUD</h4>

<!-- area to feedback messages-->
@if (feedback.Length > 0)
{
    <div class="alert alert-info">
        <p>@feedback</p>
    </div>
}
<!-- area to error messages-->
@if (errors.Count > 0)
{
    <div class="alert alert-danger">
        <p>Please fix the following issues:</p>
        <ul>
            @foreach (var error in errors)
            {
                <li>@error</li>
            }
        </ul>
    </div>
}

<!-- EditForm this groups a bunch of controls as a single form
              allows for adding additonal option to integrate with your form controls
              contains a set of enhanced input controls

    register an EditContext instance for this form

     DataAnnotationsValidator   the DataAnnotationsValidator component is used within an
                                EditForm to enable validation based on data annotations
                                applied to model properties.

     ValidationSummary displays a list of all validation errors
                      show a summary of errors at the top of the form
                      errors can be from model properties or custom messages
                      this is optional

     ValidationMessage displays a validation error message for the associated entity property
                       this is optional

    one can still use bootstrap customization of the form appearance
-->
<EditForm EditContext="@editContext">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="row">
        <div class="offset-1 col-md-4">
            <label for="productid" class="form-label">Product ID</label> 
            <!-- bind-Value is required when using EditForm controls
                 EditForm controls are self closing
                 no type is need for the EditForm control-->
            <InputNumber @bind-Value="CurrentProduct.ProductID"
                    class="form-control" id="productid" readonly 
                    style="width:75px;"/>
            <br/>
            <label for="productname" class="form-label">Product Name</label>
            <InputText @bind-Value="CurrentProduct.ProductName"
                         class="form-control" id="productname" 
                         placeholder="product name"/>
            <!-- ValidationMessage allows for the display of an annotation message
                           associated with the indicated entity property
                      -->
            <ValidationMessage For="@(() => CurrentProduct.ProductName)" />
            <br />
            <label for="categoryid" class="form-label">Category</label>
            <InputSelect id="categoryid" @bind-Value="CurrentProduct.CategoryID"
                            class="form-control">
                <option value="0">... select</option>
                @foreach(Category cat in categoryList)
                {
                    @* 
                        on this option the selected parameters is testing
                        the current category id of the category list against
                            the actual cagtegory id of your Product record
                        if there is a match, the select line item will be the
                            line item show on the page.
                    *@
                    <option value="@cat.CategoryID"
                            selcted="@(cat.CategoryID == CurrentProduct.CategoryID)">
                        @cat.CategoryName   
                     </option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => CurrentProduct.CategoryID)" />
            <br />
            <label for="supplierid" class="form-label">Supplier</label>
            <InputSelect id="supplierid" @bind-Value="CurrentProduct.SupplierID"
                         class="form-control">
                <option value="0">... select</option>
                @foreach (Supplier sup in supplierList)
                {
                    @*
                on this option the selected parameters is testing
                the current category id of the category list against
                the actual cagtegory id of your Product record
                if there is a match, the select line item will be the
                line item show on the page.
                *@
                    <option value="@sup.SupplierID"
                            selcted="@(sup.SupplierID == CurrentProduct.SupplierID)">
                        @sup.CompanyName
                    </option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => CurrentProduct.SupplierID)" />
        </div>
        <div class="offset-1 col-md-4">
            <label for="quanityperunit" class="form-label">Quantity per unit</label>
            <InputText @bind-Value="CurrentProduct.QuantityPerUnit"
                       class="form-control" id="quantityperunit"
                       placeholder="qty per unit" />
            <ValidationMessage For="@(() => CurrentProduct.QuantityPerUnit)" />
            <br />
            <label for="unitprice" class="form-label">Unit Price</label>
            <InputNumber @bind-Value="CurrentProduct.UnitPrice"
                       class="form-control" id="unitprice"
                       placeholder="unit price" />
            <ValidationMessage For="@(() => CurrentProduct.UnitPrice)" />
            <br />
            <label for="minimumorderquantity" class="form-label">Min Order Qty</label>
            <InputNumber @bind-Value="CurrentProduct.MinimumOrderQuantity"
                         class="form-control" id="minimumorderquantity"
                         placeholder="min qty" />
            <ValidationMessage For="@(() => CurrentProduct.MinimumOrderQuantity)" />
            <br />
            <label for="unitsonorder" class="form-label">Units on Order</label>
            <InputNumber @bind-Value="CurrentProduct.UnitsOnOrder"
                         class="form-control" id="unitsonorder"
                         placeholder="order qty" />
            <ValidationMessage For="@(() => CurrentProduct.UnitsOnOrder)" />
        </div>
    </div>
    <br/><br/>
    <div class="row">
        <div class="col-md-12 text-center">
            <button type="submit" class="btn btn-outline-primary rounded-pill"
                 style="width:173px;" @onclick='OnCreate'>
                Create
            </button>
        </div>
    </div>
</EditForm>
@code {
    private string feedback = "";
    private List<string> errors = new List<string>();

    //routing parameter
    //this will receive a value from another location as the page is created
    //this will can now be used on this page
    //the datatype definition on the declare statement MUST match the routing parameter declaration
    //NOTE: IF your parameter is of type string, you DO NOT need to add the ? 
    [Parameter]
    public int? productid { get; set; }

    //for EditForm
    private EditContext editContext;
    private Product CurrentProduct = new Product();  //entity for the form
    ValidationMessageStore validationMessageStore;

    [Inject]
    public CategoryServices _categoryServices {get;set;}
    private List<Category> categoryList = new List<Category>();

    [Inject]
    public SupplierServices _supplierServices {get;set;}
    private List<Supplier> supplierList = new List<Supplier>();

    [Inject]
    public ProductServices _productServices { get; set; }

    protected override void OnInitialized()
    {
        editContext = new EditContext(CurrentProduct);

        //setup an instance for custom validation logic and tie it
        //  to the editContext instance which is tied to your form
        //  and is associated with a particular entity for its validation annotation
        validationMessageStore = new ValidationMessageStore(editContext);

        categoryList = _categoryServices.Category_GetAll();
        supplierList = _supplierServices.Supplier_GetAll();

        //when the page is first render, we need to determind if the page was called with
        //   a pkey parameter value
        // No value: assumption is a NEW (create) product will be done, nothing to lookup
        // Yes value: assumption an existing product record will be altered or deleted
        //            the current record on the database should be displayed to the use
        //            within this method, lookup the record to display
        //since the productid is a nullable variable, add the .Value to obtain the value
        if(productid.HasValue)
            CurrentProduct = _productServices.Product_GetByID(productid.Value);
        base.OnInitialized();
    }

    private Exception GetInnerException(Exception ex)
    {
        while (ex.InnerException != null)
            ex = ex.InnerException;
        return ex;
    }

    private void OnCreate()
    {
        //clear out all old messaages
        feedback = "";
        errors.Clear();
        validationMessageStore.Clear();

        try
        {
            //check out if the form passes the validation of the entity
            if(editContext.Validate())
            {
               

                //custom validation that is not in the entity set of validation
                //  annotations

                //in this example, we are checking to see if a selection
                //  was done for the foreign key fields of the entity

                //the CategoryID is an integer
                //the default of an integer is 0
                //the CategoryID has a given value )
                //Problem: no foreign key/primary key on the database is 0
                //         if a proper selection is not done, then when the
                //              record is attempted to be added to the database
                //              the database will throw an exception

                //custom validation
                if(CurrentProduct.CategoryID == 0)
                {
                    //construction
                    // .Add to your instance of form validation messages
                    // parameter 1: the associate field to display the message
                    //                looking for the field indentifier
                    //              nameof(xxxx) supplies the field indentifier
                    // parameter 2: the message to display
                    validationMessageStore.Add(editContext.Field(nameof(CurrentProduct.CategoryID)),
                        "You must select a category");
                }
                if (CurrentProduct.SupplierID == 0)
                {

                    validationMessageStore.Add(editContext.Field(nameof(CurrentProduct.SupplierID)),
                        "You must select a supplier");
                }

                //any other custom validation can be done at this point

                //check to see if any custom validation errors have occured
                //does not actually retreive the message for use, but checks
                //  to see if .Any exist (return value of .Any is a bool)
                if (editContext.GetValidationMessages().Any())
                {
                    //notify editContent that the state of validation messages has changed
                    editContext.NotifyValidationStateChanged();
                }
                else
                {
                    //you can assume at this point that your data has passed
                    //  the level of validation you have consider to be good
                    //  for further processing of the record to the database

                    //call a method within the ProductServices that will process
                    //  the current product data; that is; add it to the database
                    int newproductid = _productServices.Product_Add(CurrentProduct);

                    //if an error was thrown from the class library, control would go to
                    //  the catch
                    //if no error was thrown, then control continues within the try
                    feedback = $"Product: {CurrentProduct.ProductName} (ID: {newproductid}) has been added";
                }
            }
        }
        catch (ArgumentNullException ex)
        {
            errors.Add($"Missing Data: {GetInnerException(ex).Message}");
        }
        catch (ArgumentException ex)
        {
            errors.Add($"Data Issue: {GetInnerException(ex).Message}");
        }
        catch(Exception ex)
        {
            errors.Add($"System Error: {GetInnerException(ex).Message}");
        }

    }
}
