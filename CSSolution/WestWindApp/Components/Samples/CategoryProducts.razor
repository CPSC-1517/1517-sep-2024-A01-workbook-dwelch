@page "/categoryproducts"
<PageTitle>Products By Category</PageTitle>
@rendermode InteractiveServer
@using WestWindSystem.BLL;
@using WestWindSystem.Entities;

<h3>Products  By Category</h3>
<h4>... view products by category for CRUD Update/Delete selection</h4>

<!-- area to feedback messages-->
@if (feedback.Length > 0)
{
    <div class="alert alert-info">
        <p>@feedback</p>
    </div>
}
<!-- area to error messages-->
@if (errors.Count > 0)
{
    <div class="alert alert-danger">
        <p>Please fix the following issues:</p>
        <ul>
            @foreach (var error in errors)
            {
                <li>@error</li>
            }
        </ul>
    </div>
}
<div class="col-md-12">
    <label for="catlist">Select a category</label>
    &nbsp;&nbsp;
    <select id="catlist" @bind="categoryidarg">
        <option value="0">... select ..</option>
        @foreach (Category item in categoryList)
        {
            <option value="@item.CategoryID">@item.CategoryName</option>
        }
    </select>
    &nbsp;&nbsp;
    <button type="submit" class="btn btn-primary rounded-pill" @onclick="Fetch">Fetch Products</button>
</div>

<br/>
<br/>
<div class="row">
    <div class="offset-2 col-md-8">
        <!--
            Problem: using the productList variable to control the rendering of the table
                     productList will not be filled until the button is pressed
                     however, the page needs an instance of productList to render the page
                         to display the button to get the the productList
                     looks like a chicken and egg problem
            Solution: on declaring the productList, instantiate an empty instance of the list
        -->
        @if(productList.Count > 0)
        {
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>&nbsp;</th>
                        <th>Product</th>
                        <th>Supplier</th>
                        <th>Unit Size</th>
                        <th>Disc.</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach(Product item in productList)
                    {
                        // the link on the display line will send the display to the crud page
                        // HOWEVER, an important piece of data also needs to be send to the crud page
                        //          that piece of data is the pkey of the product to display on
                        //                  the crud
                        // Solution: The "View" needs to be an anchor tag to be able to transfer
                        //              the user to the CRUD page
                        //           we can add that information to the href as a routing parameter
                        //           the crud page will need to alter its @page directive to capture
                        //                the routing parameter
                        //           on this page add the parameter value to send to the href
                        <tr>
                            <td><a href="/productcrud/@item.ProductID">View</a></td>
                            <td>@item.ProductName</td>
                            <td>@item.Supplier.CompanyName</td>
                            <td>@item.QuantityPerUnit</td>
                            <!-- the ternary operation will only display a value
                                  if the value makes sense
                                 Only discontinued products will have a value displayed
                            -->
                            <td>@(item.Discontinued ? "Yes" : "")</td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            if(categoryidarg > 0)
            {
                <div class="col-md-12 text-center" style="font-size:48px; font-weight:bold;">
                    <p>No products for the selected category</p>
                </div>
            }
        }
    </div>
</div>
@code {
    private string feedback = "";
    private List<string> errors = new List<string>();

    private int categoryidarg;

    [Inject]
    public CategoryServices _categoryServices { get; set; }
    private List<Category> categoryList = new List<Category>();

    [Inject]
    public SupplierServices _supplierServices { get; set; }
    private List<Supplier> supplierList = new List<Supplier>();

    [Inject]
    public ProductServices _productServices { get; set; }
    public List<Product> productList = new List<Product>();

    protected override void OnInitialized()
    {
        categoryList = _categoryServices.Category_GetAll();
        supplierList = _supplierServices.Supplier_GetAll();
        base.OnInitialized();
    }

    private Exception GetInnerException(Exception ex)
    {
        while (ex.InnerException != null)
            ex = ex.InnerException;
        return ex;
    }

    private void Fetch()
    {
        //clear old messages
        feedback = "";
        errors.Clear();

        //check that a category has been selected
        if (categoryidarg == 0)
        {
            feedback = "You must select a category to view products.";
        }
        else
        {
            try
            {


                //fetch the category products from the database to display
                productList = _productServices.Product_GetByCategoryID(categoryidarg);
            }
            catch (Exception ex)
            {
                errors.Add($"System Error: {GetInnerException(ex).Message}");
            }
        }
    }
}
